@*https://github.com/stsrki/Blazorise/blob/master/Demos/Blazorise.Demo/Pages/Tests/LiveChartsPage.razor.cs*@

@page "/"
@using Stock_Market_Dashboard.Data
@inject StockMarketService service

<h1>Stock Market Dashboard</h1>

<Card>
    <CardHeader>Settings</CardHeader>
    <CardBody>
        <Switch TValue="bool" Checked="@amazon" CheckedChanged="@OnAmazonChanged">Amazon</Switch>
        <Switch TValue="bool" Checked="@apple" CheckedChanged="@OnAppleChanged">Apple</Switch>
        <Switch TValue="bool" Checked="@google" CheckedChanged="@OnGoogleChanged">Google</Switch>
        <Switch TValue="bool" Checked="@microsoft" CheckedChanged="@OnMicrosoftChanged">Microsoft</Switch>
        <Switch TValue="bool" Checked="@sony" CheckedChanged="@OnSonyChanged">Sony</Switch>

        <Button Clicked="@(async () => await HandleRedraw(lineChart))">Refresh</Button>
    </CardBody>
</Card>

<LineChart @ref="lineChart" TItem="DataPoint" OptionsObject="@lineChartOptions" />

@code{
        bool amazon = true;
        bool apple = false;
        bool google = false;
        bool microsoft = false;
        bool sony = false;

        async void OnAmazonChanged(bool value)
        {
            amazon = value;
            await HandleRedraw(lineChart);
        }
        async void OnAppleChanged(bool value)
        {
            apple = value;
            await HandleRedraw(lineChart);
        }
        async void OnGoogleChanged(bool value)
        {
            google = value;
            await HandleRedraw(lineChart);
        }
        async void OnMicrosoftChanged(bool value)
        {
            microsoft = value;
            await HandleRedraw(lineChart);
        }
        async void OnSonyChanged(bool value)
        {
            sony = value;
            await HandleRedraw(lineChart);
        }

        public struct DataPoint
        {
            public object X { get; set; }

            public object Y { get; set; }
        }

        LineChart<DataPoint> lineChart;

        List<DataPoint> companyPriceDataPoints = new List<DataPoint>();

        List<string> companies = new List<string>();

        string[] timestamps = { DateTime.Now.AddDays(-1).ToShortDateString(), DateTime.Now.ToShortDateString() };

        StockMarketResponse stockMarketDataAmazon;
        StockMarketResponse stockMarketDataApple;
        StockMarketResponse stockMarketDataGoogle;
        StockMarketResponse stockMarketDataMicrosoft;
        StockMarketResponse stockMarketDataSony;

        List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
        List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

        object lineChartOptions = new
        {
            Title = new
            {
                Display = true,
                Text = "Stock Market Line Chart"
            },
            Scales = new
            {
                XAxes = new object[]
                {
                    new {
                        ScaleLabel = new
                        {
                            Display = true, LabelString = "Date"
                        }
                    }
                },
                YAxes = new object[]
                {
                    new {
                        ScaleLabel = new
                        {
                            Display = true, LabelString = "Price"
                        }
                    }
                }
            },
            Tooltips = new
            {
                Mode = "nearest",
                Intersect = false
            },
            Hover = new
            {
                Mode = "nearest",
                Intersect = false
            }
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            stockMarketDataAmazon = await service.GetStockMarketDataForCompanyAsync("AMZN");
            stockMarketDataApple = await service.GetStockMarketDataForCompanyAsync("AAPL");
            stockMarketDataGoogle = await service.GetStockMarketDataForCompanyAsync("GOOGL");
            stockMarketDataMicrosoft = await service.GetStockMarketDataForCompanyAsync("MSFT");
            stockMarketDataSony = await service.GetStockMarketDataForCompanyAsync("SNE");

            await Task.WhenAll(HandleRedraw(lineChart));
        }
    }

    async Task HandleRedraw<TDataSet, TItem, TOptions, TModel>(BaseChart<TDataSet, TItem, TOptions, TModel> chart)
        where TDataSet : ChartDataset<TItem>
        where TOptions : ChartOptions
        where TModel : ChartModel
    {
        await lineChart.Clear();

        await lineChart.AddLabel(timestamps);

        GetSelectedCompanies();

        foreach (string company in companies)
        {
            List<DataPoint> data = CheckDataSetVisibility(company);
            await lineChart.AddDataSet(GetLineChartDataset(company, data));
        }

        await lineChart.Update();
    }

    private void GetSelectedCompanies()
    {
        companies = new List<string>();

        if (amazon)
            companies.Add("Amazon");
        if (apple)
            companies.Add("Apple");
        if (google)
            companies.Add("Google");
        if (microsoft)
            companies.Add("Microsoft");
        if (sony)
            companies.Add("Sony");
    }

    private List<DataPoint> CheckDataSetVisibility(string company)
    {
        DataPoint companyPriceDataPoint = new DataPoint();

        companyPriceDataPoints = new List<DataPoint>();

        switch(company)
        {
            case "Amazon":
                companyPriceDataPoint.X = DateTime.Now.AddDays(-1);
                companyPriceDataPoint.Y = stockMarketDataAmazon.pc;
                companyPriceDataPoints.Add(companyPriceDataPoint);

                companyPriceDataPoint.X = DateTime.Now;
                companyPriceDataPoint.Y = stockMarketDataAmazon.c;
                companyPriceDataPoints.Add(companyPriceDataPoint);
                break;
            case "Apple":
                companyPriceDataPoint.X = DateTime.Now.AddDays(-1);
                companyPriceDataPoint.Y = stockMarketDataApple.pc;
                companyPriceDataPoints.Add(companyPriceDataPoint);

                companyPriceDataPoint.X = DateTime.Now;
                companyPriceDataPoint.Y = stockMarketDataApple.c;
                companyPriceDataPoints.Add(companyPriceDataPoint);
                break;
            case "Google":
                companyPriceDataPoint.X = DateTime.Now.AddDays(-1);
                companyPriceDataPoint.Y = stockMarketDataGoogle.pc;
                companyPriceDataPoints.Add(companyPriceDataPoint);

                companyPriceDataPoint.X = DateTime.Now;
                companyPriceDataPoint.Y = stockMarketDataGoogle.c;
                companyPriceDataPoints.Add(companyPriceDataPoint);
                break;
            case "Microsoft":
                companyPriceDataPoint.X = DateTime.Now.AddDays(-1);
                companyPriceDataPoint.Y = stockMarketDataMicrosoft.pc;
                companyPriceDataPoints.Add(companyPriceDataPoint);

                companyPriceDataPoint.X = DateTime.Now;
                companyPriceDataPoint.Y = stockMarketDataMicrosoft.c;
                companyPriceDataPoints.Add(companyPriceDataPoint);
                break;
            case "Sony":
                companyPriceDataPoint.X = DateTime.Now.AddDays(-1);
                companyPriceDataPoint.Y = stockMarketDataSony.pc;
                companyPriceDataPoints.Add(companyPriceDataPoint);

                companyPriceDataPoint.X = DateTime.Now;
                companyPriceDataPoint.Y = stockMarketDataSony.c;
                companyPriceDataPoints.Add(companyPriceDataPoint);
                break;
        }

        return companyPriceDataPoints;
    }

    LineChartDataset<DataPoint> GetLineChartDataset(string company, List<DataPoint> data)
    {
        return new LineChartDataset<DataPoint>
        {
            Label = company,
            Data = companyPriceDataPoints,
            BackgroundColor = backgroundColors,
            BorderColor = borderColors,
            Fill = false,
            PointRadius = 2,
            BorderDash = new List<int> { }            
        };
    }
}